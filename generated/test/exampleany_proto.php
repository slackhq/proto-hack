<?hh // strict

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: test/exampleany.proto

class AnyTest implements \Protobuf\Message {
  public ?\google\protobuf\Any $any;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'any' => ?\google\protobuf\Any,
  ) $s = shape()) {
    $this->any = $s['any'] ?? null;
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "AnyTest";
  }

  public static function ParseFrom(string $input): ?AnyTest {
    $msg = new AnyTest();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          if ($this->any is null) {
            $this->any = new \google\protobuf\Any();
          }
          $this->any->MergeFrom($d->readDecoder());
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $msg = $this->any;
    if ($msg != null) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 1);
    }
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeMessage('any', 'any', $this->any, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'any':
          if ($v is null) break;
          if ($this->any is null) {
            $this->any = new \google\protobuf\Any();
          }
          $this->any->MergeJsonFrom($v);
          break;
        default:
        break;
      }
    }
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is AnyTest)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $tmp = $o->any;
    if ($tmp is nonnull) {
      $nv = new \google\protobuf\Any();
      $nv->CopyFrom($tmp);
      $this->any = $nv;
    }
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is AnyTest)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->any !== null) {
      if ($this->any !== null) {
        $this->any->MergeMessageFrom($o->any);
      } else {
        $this->any = new \google\protobuf\Any();
        $this->any->CopyFrom($o);
      }
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}


class XXX_FileDescriptor_test_exampleany__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'test/exampleany.proto';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    // 378 bytes of gzipped FileDescriptorProto as a string
    return (string)\gzuncompress("\x78\xda\xe2\x12\x2d\x49\x2d\x2e\xd1\x4f\xad\x48\xcc\x2d\xc8\x49\x4d\xcc\xab\xd4\x2b\x28\xca\x2f\xc9\x97\x92\x4c\xcf\xcf\x4f\xcf\x49\xd5\x7\xf3\x92\x4a\xd3\xf4\xe1\x52\x4a\x86\x5c\xec\x8e\x79\x95\x21\xa9\xc5\x25\x42\x6a\x5c\xcc\x89\x79\x95\x12\x8c\xa\x8c\x1a\xdc\x46\x22\x7a\x10\x3d\x7a\x30\x3d\x7a\x8e\x79\x95\x41\x20\x5\x49\x6c\x60\x21\x63\x40\x0\x0\x0\xff\xff\xf9\xb6\x24\x46");
  }
}
