<?hh // strict
namespace bing\bong;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: test/proto2_ex1.proto

newtype AEnum1_enum_t as int = int;
abstract class AEnum1 {
  const AEnum1_enum_t A = 3;
  const AEnum1_enum_t B = 1;
  const AEnum1_enum_t pb_CLASS = 10;
  private static dict<int, string> $itos = dict[
    3 => 'A',
    1 => 'B',
    10 => 'CLASS',
  ];
  public static function ToStringDict(): dict<int, string> {
    return self::$itos;
  }
  private static dict<string, int> $stoi = dict[
    'A' => 3,
    'B' => 1,
    'CLASS' => 10,
  ];
  public static function FromMixed(mixed $m): AEnum1_enum_t {
    if ($m is string) return idx(self::$stoi, $m, \is_numeric($m) ? ((int) $m) : 0);
    if ($m is int) return $m;
    return 0;
  }
  public static function FromInt(int $i): AEnum1_enum_t {
    return $i;
  }
}

class example1 implements \Protobuf\Message {
  public \bing\bong\AEnum1_enum_t $enum_default;
  public \bing\bong\AEnum1_enum_t $enum_custom;
  public float $adouble;
  public float $afloat;
  public bool $abool;
  public string $astring;
  public string $abytes;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'enum_default' => \bing\bong\AEnum1_enum_t,
    ?'enum_custom' => \bing\bong\AEnum1_enum_t,
    ?'adouble' => float,
    ?'afloat' => float,
    ?'abool' => bool,
    ?'astring' => string,
    ?'abytes' => string,
  ) $s = shape()) {
    $this->enum_default = $s['enum_default'] ?? \bing\bong\AEnum1::A;
    $this->enum_custom = $s['enum_custom'] ?? \bing\bong\AEnum1::pb_CLASS;
    $this->adouble = $s['adouble'] ?? (float)3;
    $this->afloat = $s['afloat'] ?? (float)4.5;
    $this->abool = $s['abool'] ?? true;
    $this->astring = $s['astring'] ?? 'custom!';
    $this->abytes = $s['abytes'] ?? \stripcslashes('foo');
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "bing.bong.example1";
  }

  public static function ParseFrom(string $input): ?example1 {
    $msg = new example1();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->enum_default = \bing\bong\AEnum1::FromInt($d->readVarint());
          break;
        case 2:
          $this->enum_custom = \bing\bong\AEnum1::FromInt($d->readVarint());
          break;
        case 3:
          $this->adouble = $d->readDouble();
          break;
        case 4:
          $this->afloat = $d->readFloat();
          break;
        case 5:
          $this->abool = $d->readBool();
          break;
        case 6:
          $this->astring = $d->readString();
          break;
        case 7:
          $this->abytes = $d->readString();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized = $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->enum_default !== \bing\bong\AEnum1::A) {
      $e->writeTag(1, 0);
      $e->writeVarint($this->enum_default);
    }
    if ($this->enum_custom !== \bing\bong\AEnum1::pb_CLASS) {
      $e->writeTag(2, 0);
      $e->writeVarint($this->enum_custom);
    }
    if ($this->adouble !== (float)3) {
      $e->writeTag(3, 1);
      $e->writeDouble($this->adouble);
    }
    if ($this->afloat !== (float)4.5) {
      $e->writeTag(4, 5);
      $e->writeFloat($this->afloat);
    }
    if ($this->abool !== true) {
      $e->writeTag(5, 0);
      $e->writeBool($this->abool);
    }
    if ($this->astring !== 'custom!') {
      $e->writeTag(6, 2);
      $e->writeString($this->astring);
    }
    if ($this->abytes !== \stripcslashes('foo')) {
      $e->writeTag(7, 2);
      $e->writeString($this->abytes);
    }
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writeEnum('enum_default', 'enumDefault', \bing\bong\AEnum1::ToStringDict(), $this->enum_default, false);
    $e->writeEnum('enum_custom', 'enumCustom', \bing\bong\AEnum1::ToStringDict(), $this->enum_custom, false);
    $e->writeFloat('adouble', 'adouble', $this->adouble, false);
    $e->writeFloat('afloat', 'afloat', $this->afloat, false);
    $e->writeBool('abool', 'abool', $this->abool, false);
    $e->writeString('astring', 'astring', $this->astring, false);
    $e->writeBytes('abytes', 'abytes', $this->abytes, false);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'enum_default': case 'enumDefault':
          $this->enum_default = \bing\bong\AEnum1::FromMixed($v);
          break;
        case 'enum_custom': case 'enumCustom':
          $this->enum_custom = \bing\bong\AEnum1::FromMixed($v);
          break;
        case 'adouble':
          $this->adouble = \Protobuf\Internal\JsonDecoder::readFloat($v);
          break;
        case 'afloat':
          $this->afloat = \Protobuf\Internal\JsonDecoder::readFloat($v);
          break;
        case 'abool':
          $this->abool = \Protobuf\Internal\JsonDecoder::readBool($v);
          break;
        case 'astring':
          $this->astring = \Protobuf\Internal\JsonDecoder::readString($v);
          break;
        case 'abytes':
          $this->abytes = \Protobuf\Internal\JsonDecoder::readBytes($v);
          break;
        default:
        break;
      }
    }
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is example1)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->enum_default = $o->enum_default;
    $this->enum_custom = $o->enum_custom;
    $this->adouble = $o->adouble;
    $this->afloat = $o->afloat;
    $this->abool = $o->abool;
    $this->astring = $o->astring;
    $this->abytes = $o->abytes;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}


class XXX_FileDescriptor_test_proto2_ex1__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'test/proto2_ex1.proto';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    // 1015 bytes of gzipped FileDescriptorProto as a string
    return (string)\gzuncompress("\x78\xda\x74\x8f\xc1\x6a\xb3\x40\x10\xc7\x99\x18\x63\x9c\x2f\x7c\xd8\x85\xc2\xd2\x5c\xd6\x9e\x96\x1e\x2c\xa6\xe9\xa1\x7b\xb3\x69\x6f\x3d\x6d\x1e\x40\xd6\x66\x95\x80\xba\x41\x77\x21\x7d\x8c\xbe\x71\x51\x93\xde\x7a\x9a\x99\x1f\xbf\x19\xfe\x83\xb7\x56\xf7\xf6\xf1\xd4\x19\x6b\x36\xb9\x3e\xa7\xc9\xd8\x92\xb0\x38\xb6\x55\x52\x98\xb6\xba\xff\x9e\xe1\x52\x9f\x55\x73\xaa\x75\x4a\xb6\xb8\xd2\xad\x6b\xf2\x83\x2e\x95\xab\x2d\x5\x6\xfc\xff\xe6\x26\xf9\xd5\x93\xec\xbd\x75\x4d\x2a\xff\xd\xda\xdb\x64\x91\x17\x1c\xc7\xfc\xd3\xf5\xd6\x34\x74\xf6\xc7\x92\xf0\x77\x1f\xd9\x7e\x2f\x71\x90\x77\xa3\x4b\xd6\x18\xa8\x83\x71\x45\xad\xa9\xc7\x80\x83\x80\x27\x79\x25\x64\x8d\xb\x55\xd6\x46\x59\x3a\x67\xc0\x67\xc2\xdb\x26\xcf\xf2\x82\xc8\x1d\xfa\xaa\x30\xa6\xa6\x3e\x3\xbe\x14\x73\xdb\x39\x2d\x27\x44\x62\xc\x54\x6f\xbb\x63\x5b\xd1\x5\x3\x1e\x8a\x60\x8a\x16\xcb\x2b\x1f\x6f\x17\x5f\x56\xf7\x34\x60\xc0\x57\xc2\x2b\x8d\x91\x17\xf4\x10\xe3\x62\x8a\x4c\x7c\x84\x2c\xf2\x86\xf2\x1a\x1\x9\x71\x7a\x21\xc2\x9f\x0\x0\x0\xff\xff\xa1\x62\x5d\xdb");
  }
}
