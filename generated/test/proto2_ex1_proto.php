<?hh // strict
namespace bing\bong;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: test/proto2_ex1.proto

newtype AEnum1_enum_t as int = int;
abstract class AEnum1 {
  const AEnum1_enum_t A = 3;
  const AEnum1_enum_t B = 1;
  const AEnum1_enum_t pb_CLASS = 10;
  private static dict<int, string> $itos = dict[
    3 => 'A',
    1 => 'B',
    10 => 'CLASS',
  ];
  public static function ToStringDict(): dict<int, string> {
    return self::$itos;
  }
  private static dict<string, int> $stoi = dict[
    'A' => 3,
    'B' => 1,
    'CLASS' => 10,
  ];
  public static function FromMixed(mixed $m): AEnum1_enum_t {
    if ($m is string) return idx(self::$stoi, $m, \is_numeric($m) ? ((int) $m) : 0);
    if ($m is int) return $m;
    return 0;
  }
  public static function FromInt(int $i): AEnum1_enum_t {
    return $i;
  }
}

class example1proto2syntax implements \Protobuf\Message {
  private \bing\bong\AEnum1_enum_t $enum_default;
  private bool $was_enum_default_set;
  private \bing\bong\AEnum1_enum_t $enum_custom;
  private bool $was_enum_custom_set;
  private float $adouble;
  private bool $was_adouble_set;
  private float $afloat;
  private bool $was_afloat_set;
  private bool $abool;
  private bool $was_abool_set;
  private string $astring;
  private bool $was_astring_set;
  private string $abytes;
  private bool $was_abytes_set;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'enum_default' => \bing\bong\AEnum1_enum_t,
    ?'enum_custom' => \bing\bong\AEnum1_enum_t,
    ?'adouble' => float,
    ?'afloat' => float,
    ?'abool' => bool,
    ?'astring' => string,
    ?'abytes' => string,
  ) $s = shape()) {
    if (Shapes::keyExists($s, 'enum_default')) {
      $this->enum_default = $s['enum_default'];
      $this->was_enum_default_set = true;
    } else {
      $this->enum_default = \bing\bong\AEnum1::A;
      $this->was_enum_default_set = false;
    }
    if (Shapes::keyExists($s, 'enum_custom')) {
      $this->enum_custom = $s['enum_custom'];
      $this->was_enum_custom_set = true;
    } else {
      $this->enum_custom = \bing\bong\AEnum1::pb_CLASS;
      $this->was_enum_custom_set = false;
    }
    if (Shapes::keyExists($s, 'adouble')) {
      $this->adouble = $s['adouble'];
      $this->was_adouble_set = true;
    } else {
      $this->adouble = (float)3;
      $this->was_adouble_set = false;
    }
    if (Shapes::keyExists($s, 'afloat')) {
      $this->afloat = $s['afloat'];
      $this->was_afloat_set = true;
    } else {
      $this->afloat = (float)4.5;
      $this->was_afloat_set = false;
    }
    if (Shapes::keyExists($s, 'abool')) {
      $this->abool = $s['abool'];
      $this->was_abool_set = true;
    } else {
      $this->abool = true;
      $this->was_abool_set = false;
    }
    if (Shapes::keyExists($s, 'astring')) {
      $this->astring = $s['astring'];
      $this->was_astring_set = true;
    } else {
      $this->astring = 'custom!';
      $this->was_astring_set = false;
    }
    if (Shapes::keyExists($s, 'abytes')) {
      $this->abytes = $s['abytes'];
      $this->was_abytes_set = true;
    } else {
      $this->abytes = \stripcslashes('foo');
      $this->was_abytes_set = false;
    }
    $this->XXX_unrecognized = '';
  }

  public function getEnumDefault(): \bing\bong\AEnum1_enum_t {
    return $this->enum_default;
  }

  public function setEnumDefault(\bing\bong\AEnum1_enum_t $v): void {
    $this->enum_default = $v;
    $this->was_enum_default_set = true;
  }

  public function hasEnumDefault(): bool {
    return $this->was_enum_default_set;
  }

  public function getEnumCustom(): \bing\bong\AEnum1_enum_t {
    return $this->enum_custom;
  }

  public function setEnumCustom(\bing\bong\AEnum1_enum_t $v): void {
    $this->enum_custom = $v;
    $this->was_enum_custom_set = true;
  }

  public function hasEnumCustom(): bool {
    return $this->was_enum_custom_set;
  }

  public function getAdouble(): float {
    return $this->adouble;
  }

  public function setAdouble(float $v): void {
    $this->adouble = $v;
    $this->was_adouble_set = true;
  }

  public function hasAdouble(): bool {
    return $this->was_adouble_set;
  }

  public function getAfloat(): float {
    return $this->afloat;
  }

  public function setAfloat(float $v): void {
    $this->afloat = $v;
    $this->was_afloat_set = true;
  }

  public function hasAfloat(): bool {
    return $this->was_afloat_set;
  }

  public function getAbool(): bool {
    return $this->abool;
  }

  public function setAbool(bool $v): void {
    $this->abool = $v;
    $this->was_abool_set = true;
  }

  public function hasAbool(): bool {
    return $this->was_abool_set;
  }

  public function getAstring(): string {
    return $this->astring;
  }

  public function setAstring(string $v): void {
    $this->astring = $v;
    $this->was_astring_set = true;
  }

  public function hasAstring(): bool {
    return $this->was_astring_set;
  }

  public function getAbytes(): string {
    return $this->abytes;
  }

  public function setAbytes(string $v): void {
    $this->abytes = $v;
    $this->was_abytes_set = true;
  }

  public function hasAbytes(): bool {
    return $this->was_abytes_set;
  }

  public function MessageName(): string {
    return "bing.bong.example1proto2syntax";
  }

  public static function ParseFrom(string $input): ?example1proto2syntax {
    $msg = new example1proto2syntax();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->enum_default = \bing\bong\AEnum1::FromInt($d->readVarint());
          $this->was_enum_default_set = true;
          break;
        case 2:
          $this->enum_custom = \bing\bong\AEnum1::FromInt($d->readVarint());
          $this->was_enum_custom_set = true;
          break;
        case 3:
          $this->adouble = $d->readDouble();
          $this->was_adouble_set = true;
          break;
        case 4:
          $this->afloat = $d->readFloat();
          $this->was_afloat_set = true;
          break;
        case 5:
          $this->abool = $d->readBool();
          $this->was_abool_set = true;
          break;
        case 6:
          $this->astring = $d->readString();
          $this->was_astring_set = true;
          break;
        case 7:
          $this->abytes = $d->readString();
          $this->was_abytes_set = true;
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized = $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->was_enum_default_set) {
      $e->writeTag(1, 0);
      $e->writeVarint($this->enum_default);
    }
    if ($this->was_enum_custom_set) {
      $e->writeTag(2, 0);
      $e->writeVarint($this->enum_custom);
    }
    if ($this->was_adouble_set) {
      $e->writeTag(3, 1);
      $e->writeDouble($this->adouble);
    }
    if ($this->was_afloat_set) {
      $e->writeTag(4, 5);
      $e->writeFloat($this->afloat);
    }
    if ($this->was_abool_set) {
      $e->writeTag(5, 0);
      $e->writeBool($this->abool);
    }
    if ($this->was_astring_set) {
      $e->writeTag(6, 2);
      $e->writeString($this->astring);
    }
    if ($this->was_abytes_set) {
      $e->writeTag(7, 2);
      $e->writeString($this->abytes);
    }
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    if ($this->hasEnumDefault()) {
      $e->writeEnum('enum_default', 'enumDefault', \bing\bong\AEnum1::ToStringDict(), $this->enum_default, false);
    }
    if ($this->hasEnumCustom()) {
      $e->writeEnum('enum_custom', 'enumCustom', \bing\bong\AEnum1::ToStringDict(), $this->enum_custom, false);
    }
    if ($this->hasAdouble()) {
      $e->writeFloat('adouble', 'adouble', $this->adouble, false);
    }
    if ($this->hasAfloat()) {
      $e->writeFloat('afloat', 'afloat', $this->afloat, false);
    }
    if ($this->hasAbool()) {
      $e->writeBool('abool', 'abool', $this->abool, false);
    }
    if ($this->hasAstring()) {
      $e->writeString('astring', 'astring', $this->astring, false);
    }
    if ($this->hasAbytes()) {
      $e->writeBytes('abytes', 'abytes', $this->abytes, false);
    }
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'enum_default': case 'enumDefault':
          $this->enum_default = \bing\bong\AEnum1::FromMixed($v);
          $this->was_enum_default_set = true;
          break;
        case 'enum_custom': case 'enumCustom':
          $this->enum_custom = \bing\bong\AEnum1::FromMixed($v);
          $this->was_enum_custom_set = true;
          break;
        case 'adouble':
          $this->adouble = \Protobuf\Internal\JsonDecoder::readFloat($v);
          $this->was_adouble_set = true;
          break;
        case 'afloat':
          $this->afloat = \Protobuf\Internal\JsonDecoder::readFloat($v);
          $this->was_afloat_set = true;
          break;
        case 'abool':
          $this->abool = \Protobuf\Internal\JsonDecoder::readBool($v);
          $this->was_abool_set = true;
          break;
        case 'astring':
          $this->astring = \Protobuf\Internal\JsonDecoder::readString($v);
          $this->was_astring_set = true;
          break;
        case 'abytes':
          $this->abytes = \Protobuf\Internal\JsonDecoder::readBytes($v);
          $this->was_abytes_set = true;
          break;
        default:
        break;
      }
    }
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is example1proto2syntax)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->hasEnumDefault()) {
      $this->enum_default = $o->enum_default;
    }
    if ($o->hasEnumCustom()) {
      $this->enum_custom = $o->enum_custom;
    }
    if ($o->hasAdouble()) {
      $this->adouble = $o->adouble;
    }
    if ($o->hasAfloat()) {
      $this->afloat = $o->afloat;
    }
    if ($o->hasAbool()) {
      $this->abool = $o->abool;
    }
    if ($o->hasAstring()) {
      $this->astring = $o->astring;
    }
    if ($o->hasAbytes()) {
      $this->abytes = $o->abytes;
    }
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}


class XXX_FileDescriptor_test_proto2_ex1__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'test/proto2_ex1.proto';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    // 1033 bytes of gzipped FileDescriptorProto as a string
    return (string)\gzuncompress("\x78\xda\x74\x8f\xb1\x4e\xc3\x30\x10\x86\xe5\xa6\x69\xe8\x51\xa1\x62\x81\x64\xd1\xc5\x61\xb2\x18\x82\x52\xca\x80\xb7\x50\xd8\x98\xdc\x7\x88\x1c\xea\x44\x95\x12\xbb\x4a\x6c\x29\x7d\x18\xde\x15\x25\x6e\xd9\x98\xec\xfb\xf4\xfd\xa7\xff\xe0\xde\xaa\xce\x3e\x1f\x5b\x63\xcd\x3a\x57\x7d\x9a\x8c\x5f\x3c\x2f\xe\xba\x4a\xa\xa3\xab\xc7\x9f\x9\xdc\xa9\x5e\x36\xc7\x5a\xa5\xde\xeb\x4e\xda\xca\x1e\x6f\x60\xa1\xb4\x6b\xf2\xbd\x2a\xa5\xab\x2d\x41\x14\xb1\x9b\xf5\x6d\xf2\x17\x4d\xb2\x4f\xed\x9a\x54\x5c\xf\xda\x87\xb7\xf0\x1b\x8c\x63\xfe\xed\x3a\x6b\x1a\x32\xf9\x27\xc4\xc3\xed\x57\xb6\xdb\x9\x18\xe4\xed\xe8\xe2\x15\x44\x72\x6f\x5c\x51\x2b\x12\x50\xc4\x10\x47\x2f\xe2\x42\xf0\xa\x66\xb2\xac\x8d\xb4\x64\x4a\x11\x9b\xf0\x60\x93\xbc\x8a\x33\xc2\xf\x10\xca\xc2\x98\x9a\x84\x14\xb1\x2b\x3e\xb5\xad\x53\xc2\x23\x1c\x43\x24\x3b\xdb\x1e\x74\x45\x66\x14\xb1\x39\x8f\x7c\xb5\x58\x5c\xf8\xb8\xbb\x38\x59\xd5\x91\x88\x22\xb6\xe0\x41\x69\x8c\x38\xa3\xa7\x18\x66\xbe\x32\xe\x1\x65\xcb\x60\x78\xde\x97\x8\xcf\xc1\x9f\xb0\x84\xdf\x0\x0\x0\xff\xff\x7e\x50\x63\x0");
  }
}
