<?hh // strict
namespace google\protobuf;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: google/protobuf/wrappers.proto

class DoubleValue implements \Protobuf\Message {
  public float $value;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'value' => float,
  ) $s = shape()) {
    $this->value = $s['value'] ?? 0.0;
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "google.protobuf.DoubleValue";
  }

  public static function ParseFrom(string $input): ?DoubleValue {
    $msg = new DoubleValue();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readDouble();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 1);
    $e->writeDouble($this->value);
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readFloat($m);
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is DoubleValue)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->value = $o->value;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is DoubleValue)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->value !== 0.0) {
      $this->value = $o->value;
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class FloatValue implements \Protobuf\Message {
  public float $value;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'value' => float,
  ) $s = shape()) {
    $this->value = $s['value'] ?? 0.0;
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "google.protobuf.FloatValue";
  }

  public static function ParseFrom(string $input): ?FloatValue {
    $msg = new FloatValue();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readFloat();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 5);
    $e->writeFloat($this->value);
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readFloat($m);
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is FloatValue)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->value = $o->value;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is FloatValue)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->value !== 0.0) {
      $this->value = $o->value;
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class Int64Value implements \Protobuf\Message {
  public int $value;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'value' => int,
  ) $s = shape()) {
    $this->value = $s['value'] ?? 0;
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "google.protobuf.Int64Value";
  }

  public static function ParseFrom(string $input): ?Int64Value {
    $msg = new Int64Value();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding(\sprintf('%d', $this->value));
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt64Signed($m);
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is Int64Value)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->value = $o->value;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is Int64Value)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->value !== 0) {
      $this->value = $o->value;
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class UInt64Value implements \Protobuf\Message {
  public int $value;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'value' => int,
  ) $s = shape()) {
    $this->value = $s['value'] ?? 0;
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "google.protobuf.UInt64Value";
  }

  public static function ParseFrom(string $input): ?UInt64Value {
    $msg = new UInt64Value();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding(\sprintf('%u', $this->value));
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt64Unsigned($m);
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is UInt64Value)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->value = $o->value;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is UInt64Value)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->value !== 0) {
      $this->value = $o->value;
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class Int32Value implements \Protobuf\Message {
  public int $value;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'value' => int,
  ) $s = shape()) {
    $this->value = $s['value'] ?? 0;
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "google.protobuf.Int32Value";
  }

  public static function ParseFrom(string $input): ?Int32Value {
    $msg = new Int32Value();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint32Signed();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt32Signed($m);
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is Int32Value)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->value = $o->value;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is Int32Value)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->value !== 0) {
      $this->value = $o->value;
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class UInt32Value implements \Protobuf\Message {
  public int $value;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'value' => int,
  ) $s = shape()) {
    $this->value = $s['value'] ?? 0;
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "google.protobuf.UInt32Value";
  }

  public static function ParseFrom(string $input): ?UInt32Value {
    $msg = new UInt32Value();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readVarint32();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeVarint($this->value);
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readInt32Unsigned($m);
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is UInt32Value)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->value = $o->value;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is UInt32Value)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->value !== 0) {
      $this->value = $o->value;
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class BoolValue implements \Protobuf\Message {
  public bool $value;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'value' => bool,
  ) $s = shape()) {
    $this->value = $s['value'] ?? false;
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "google.protobuf.BoolValue";
  }

  public static function ParseFrom(string $input): ?BoolValue {
    $msg = new BoolValue();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readBool();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 0);
    $e->writeBool($this->value);
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readBool($m);
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is BoolValue)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->value = $o->value;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is BoolValue)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->value !== false) {
      $this->value = $o->value;
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class StringValue implements \Protobuf\Message {
  public string $value;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'value' => string,
  ) $s = shape()) {
    $this->value = $s['value'] ?? '';
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "google.protobuf.StringValue";
  }

  public static function ParseFrom(string $input): ?StringValue {
    $msg = new StringValue();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readString();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 2);
    $e->writeString($this->value);
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding($this->value);
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readString($m);
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is StringValue)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->value = $o->value;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is StringValue)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->value !== '') {
      $this->value = $o->value;
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class BytesValue implements \Protobuf\Message {
  public string $value;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'value' => string,
  ) $s = shape()) {
    $this->value = $s['value'] ?? '';
    $this->XXX_unrecognized = '';
  }

  public function MessageName(): string {
    return "google.protobuf.BytesValue";
  }

  public static function ParseFrom(string $input): ?BytesValue {
    $msg = new BytesValue();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->value = $d->readString();
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized .= $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    $e->writeTag(1, 2);
    $e->writeString($this->value);
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->setCustomEncoding(\Protobuf\Internal\JsonEncoder::encodeBytes($this->value));
  }

  public function MergeJsonFrom(mixed $m): void {
    $this->value = \Protobuf\Internal\JsonDecoder::readBytes($m);
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is BytesValue)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->value = $o->value;
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }

  public function MergeMessageFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is BytesValue)) {
      return \Errors\Errorf('MergeMessageFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->value !== '') {
      $this->value = $o->value;
    }
    $this->XXX_unrecognized .= $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}


class XXX_FileDescriptor_google_protobuf_wrappers__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'google/protobuf/wrappers.proto';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    // 971 bytes of gzipped FileDescriptorProto as a string
    return (string)\gzuncompress("\x78\xda\xe2\x92\x4b\xcf\xcf\x4f\xcf\x49\xd5\x2f\x28\xca\x2f\xc9\x4f\x2a\x4d\xd3\x2f\x2f\x4a\x2c\x28\x48\x2d\x2a\xd6\x3\x8b\x8\xf1\x43\xe4\xf5\x60\xf2\x4a\xca\x5c\xdc\x2e\xf9\xa5\x49\x39\xa9\x61\x89\x39\xa5\xa9\x42\x22\x5c\xac\x65\x20\x86\x4\xa3\x2\xa3\x6\x63\x10\x84\xa3\xa4\xc4\xc5\xe5\x96\x93\x9f\x58\x82\x45\xd\x13\x92\x1a\xcf\xbc\x12\x33\x13\x2c\x6a\x98\x61\x6a\x94\xb9\xb8\x43\x71\x29\x62\x41\x35\xc8\xd8\x8\x8b\x1a\x56\x34\x83\xb0\x2a\xe2\x85\x29\x52\xe4\xe2\x74\xca\xcf\xcf\xc1\xa2\x84\x3\xc9\x9c\xe0\x92\xa2\xcc\xbc\x74\x2c\x8a\x38\x91\x1c\xe4\x54\x59\x92\x5a\x8c\x45\xd\xf\x54\x8d\x53\x33\x23\x97\x70\x72\x7e\xae\x1e\x5a\xf0\x3a\xf1\x86\x43\xc3\x3f\x0\x24\x12\xc0\x18\x65\x8\x55\x91\x9e\x9f\x93\x98\x97\xae\x97\x5f\x94\x8e\x88\xab\x92\xca\x82\xd4\x62\xfd\xec\xbc\xfc\xf2\x3c\x78\xbc\x15\x24\xfd\x60\x64\x5c\xc4\xc4\xec\x1e\xe0\xb4\x8a\x49\xce\x1d\xa2\x39\x0\xaa\x43\x2f\x3c\x35\x27\xc7\x1b\xa4\x3e\x4\xa4\x35\x89\xd\x6c\x94\x31\x20\x0\x0\xff\xff\x59\x64\x9b\xbb");
  }
}
