<?hh // strict
namespace google\protobuf\compiler;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source: google/protobuf/compiler/plugin.proto

class Version implements \Protobuf\Message {
  private int $major;
  private bool $was_major_set;
  private int $minor;
  private bool $was_minor_set;
  private int $patch;
  private bool $was_patch_set;
  private string $suffix;
  private bool $was_suffix_set;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'major' => int,
    ?'minor' => int,
    ?'patch' => int,
    ?'suffix' => string,
  ) $s = shape()) {
    if (Shapes::keyExists($s, 'major')) {
      $this->major = $s['major'];
      $this->was_major_set = true;
    } else {
      $this->major = 0;
      $this->was_major_set = false;
    }
    if (Shapes::keyExists($s, 'minor')) {
      $this->minor = $s['minor'];
      $this->was_minor_set = true;
    } else {
      $this->minor = 0;
      $this->was_minor_set = false;
    }
    if (Shapes::keyExists($s, 'patch')) {
      $this->patch = $s['patch'];
      $this->was_patch_set = true;
    } else {
      $this->patch = 0;
      $this->was_patch_set = false;
    }
    if (Shapes::keyExists($s, 'suffix')) {
      $this->suffix = $s['suffix'];
      $this->was_suffix_set = true;
    } else {
      $this->suffix = '';
      $this->was_suffix_set = false;
    }
    $this->XXX_unrecognized = '';
  }

  public function getMajor(): int {
    return $this->major;
  }

  public function setMajor(int $v): void {
    $this->major = $v;
    $this->was_major_set = true;
  }

  public function hasMajor(): bool {
    return $this->was_major_set;
  }

  public function getMinor(): int {
    return $this->minor;
  }

  public function setMinor(int $v): void {
    $this->minor = $v;
    $this->was_minor_set = true;
  }

  public function hasMinor(): bool {
    return $this->was_minor_set;
  }

  public function getPatch(): int {
    return $this->patch;
  }

  public function setPatch(int $v): void {
    $this->patch = $v;
    $this->was_patch_set = true;
  }

  public function hasPatch(): bool {
    return $this->was_patch_set;
  }

  public function getSuffix(): string {
    return $this->suffix;
  }

  public function setSuffix(string $v): void {
    $this->suffix = $v;
    $this->was_suffix_set = true;
  }

  public function hasSuffix(): bool {
    return $this->was_suffix_set;
  }

  public function MessageName(): string {
    return "google.protobuf.compiler.Version";
  }

  public static function ParseFrom(string $input): ?Version {
    $msg = new Version();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->major = $d->readVarint32Signed();
          $this->was_major_set = true;
          break;
        case 2:
          $this->minor = $d->readVarint32Signed();
          $this->was_minor_set = true;
          break;
        case 3:
          $this->patch = $d->readVarint32Signed();
          $this->was_patch_set = true;
          break;
        case 4:
          $this->suffix = $d->readString();
          $this->was_suffix_set = true;
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized = $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->was_major_set) {
      $e->writeTag(1, 0);
      $e->writeVarint($this->major);
    }
    if ($this->was_minor_set) {
      $e->writeTag(2, 0);
      $e->writeVarint($this->minor);
    }
    if ($this->was_patch_set) {
      $e->writeTag(3, 0);
      $e->writeVarint($this->patch);
    }
    if ($this->was_suffix_set) {
      $e->writeTag(4, 2);
      $e->writeString($this->suffix);
    }
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    if ($this->hasMajor()) {
      $e->writeInt32('major', 'major', $this->major, false);
    }
    if ($this->hasMinor()) {
      $e->writeInt32('minor', 'minor', $this->minor, false);
    }
    if ($this->hasPatch()) {
      $e->writeInt32('patch', 'patch', $this->patch, false);
    }
    if ($this->hasSuffix()) {
      $e->writeString('suffix', 'suffix', $this->suffix, false);
    }
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'major':
          $this->major = \Protobuf\Internal\JsonDecoder::readInt32Signed($v);
          $this->was_major_set = true;
          break;
        case 'minor':
          $this->minor = \Protobuf\Internal\JsonDecoder::readInt32Signed($v);
          $this->was_minor_set = true;
          break;
        case 'patch':
          $this->patch = \Protobuf\Internal\JsonDecoder::readInt32Signed($v);
          $this->was_patch_set = true;
          break;
        case 'suffix':
          $this->suffix = \Protobuf\Internal\JsonDecoder::readString($v);
          $this->was_suffix_set = true;
          break;
        default:
        break;
      }
    }
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is Version)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->hasMajor()) {
      $this->setMajor($o->getMajor());
    }
    if ($o->hasMinor()) {
      $this->setMinor($o->getMinor());
    }
    if ($o->hasPatch()) {
      $this->setPatch($o->getPatch());
    }
    if ($o->hasSuffix()) {
      $this->setSuffix($o->getSuffix());
    }
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class CodeGeneratorRequest implements \Protobuf\Message {
  public vec<string> $file_to_generate;
  private string $parameter;
  private bool $was_parameter_set;
  public vec<\google\protobuf\FileDescriptorProto> $proto_file;
  private ?\google\protobuf\compiler\Version $compiler_version;
  private bool $was_compiler_version_set;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'file_to_generate' => vec<string>,
    ?'parameter' => string,
    ?'proto_file' => vec<\google\protobuf\FileDescriptorProto>,
    ?'compiler_version' => ?\google\protobuf\compiler\Version,
  ) $s = shape()) {
    $this->file_to_generate = $s['file_to_generate'] ?? vec[];
    if (Shapes::keyExists($s, 'parameter')) {
      $this->parameter = $s['parameter'];
      $this->was_parameter_set = true;
    } else {
      $this->parameter = '';
      $this->was_parameter_set = false;
    }
    $this->proto_file = $s['proto_file'] ?? vec[];
    if (Shapes::keyExists($s, 'compiler_version')) {
      $this->compiler_version = $s['compiler_version'];
      $this->was_compiler_version_set = true;
    } else {
      $this->compiler_version = null;
      $this->was_compiler_version_set = false;
    }
    $this->XXX_unrecognized = '';
  }

  public function getParameter(): string {
    return $this->parameter;
  }

  public function setParameter(string $v): void {
    $this->parameter = $v;
    $this->was_parameter_set = true;
  }

  public function hasParameter(): bool {
    return $this->was_parameter_set;
  }

  public function getCompilerVersion(): ?\google\protobuf\compiler\Version {
    return $this->compiler_version;
  }

  public function setCompilerVersion(?\google\protobuf\compiler\Version $v): void {
    $this->compiler_version = $v;
    $this->was_compiler_version_set = true;
  }

  public function hasCompilerVersion(): bool {
    return $this->was_compiler_version_set;
  }

  public function MessageName(): string {
    return "google.protobuf.compiler.CodeGeneratorRequest";
  }

  public static function ParseFrom(string $input): ?CodeGeneratorRequest {
    $msg = new CodeGeneratorRequest();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->file_to_generate []= $d->readString();
          break;
        case 2:
          $this->parameter = $d->readString();
          $this->was_parameter_set = true;
          break;
        case 3:
          if ($this->compiler_version is null) {
            $this->compiler_version = new \google\protobuf\compiler\Version();
            $this->was_compiler_version_set = true;
          }
          $this->compiler_version->MergeFrom($d->readDecoder());
          break;
        case 15:
          $obj = new \google\protobuf\FileDescriptorProto();
          $obj->MergeFrom($d->readDecoder());
          $this->proto_file []= $obj;
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized = $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    foreach ($this->file_to_generate as $elem) {
      $e->writeTag(1, 2);
      $e->writeString($elem);
    }
    if ($this->was_parameter_set) {
      $e->writeTag(2, 2);
      $e->writeString($this->parameter);
    }
    $msg = $this->compiler_version;
    if ($msg != null) {
      if ($this->was_compiler_version_set) {
        $nested = new \Protobuf\Internal\Encoder();
        $msg->WriteTo($nested);
        $e->writeEncoder($nested, 3);
      }
    }
    foreach ($this->proto_file as $msg) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 15);
    }
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    $e->writePrimitiveList('file_to_generate', 'fileToGenerate', $this->file_to_generate);
    if ($this->hasParameter()) {
      $e->writeString('parameter', 'parameter', $this->parameter, false);
    }
    if ($this->hasCompilerVersion()) {
      $e->writeMessage('compiler_version', 'compilerVersion', $this->compiler_version, false);
    }
    $e->writeMessageList('proto_file', 'protoFile', $this->proto_file);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'file_to_generate': case 'fileToGenerate':
          foreach(\Protobuf\Internal\JsonDecoder::readList($v) as $vv) {
            $this->file_to_generate []= \Protobuf\Internal\JsonDecoder::readString($vv);
          }
          break;
        case 'parameter':
          $this->parameter = \Protobuf\Internal\JsonDecoder::readString($v);
          $this->was_parameter_set = true;
          break;
        case 'compiler_version': case 'compilerVersion':
          if ($v is null) break;
          if ($this->compiler_version is null) {
            $this->compiler_version = new \google\protobuf\compiler\Version();
            $this->was_compiler_version_set = true;
          }
          $this->compiler_version->MergeJsonFrom($v);
          break;
        case 'proto_file': case 'protoFile':
          foreach(\Protobuf\Internal\JsonDecoder::readList($v) as $vv) {
            $obj = new \google\protobuf\FileDescriptorProto();
            $obj->MergeJsonFrom($vv);
            $this->proto_file []= $obj;
          }
          break;
        default:
        break;
      }
    }
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is CodeGeneratorRequest)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    $this->file_to_generate = $o->file_to_generate;
    if ($o->hasParameter()) {
      $this->setParameter($o->getParameter());
    }
    $tmp = $o->compiler_version;
    if ($tmp is nonnull) {
      $nv = new \google\protobuf\compiler\Version();
      $nv->CopyFrom($tmp);
      $this->setCompilerVersion($nv);
    } else if ($o->hasCompilerVersion()) {
      $this->setCompilerVersion(null);
    }
    foreach ($o->proto_file as $v) {
      $nv = new \google\protobuf\FileDescriptorProto();
      $nv->CopyFrom($v);
      $this->proto_file []= $nv;
    }
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

newtype CodeGeneratorResponse_Feature_enum_t as int = int;
abstract class CodeGeneratorResponse_Feature {
  const CodeGeneratorResponse_Feature_enum_t FEATURE_NONE = 0;
  const CodeGeneratorResponse_Feature_enum_t FEATURE_PROTO3_OPTIONAL = 1;
  private static dict<int, string> $itos = dict[
    0 => 'FEATURE_NONE',
    1 => 'FEATURE_PROTO3_OPTIONAL',
  ];
  public static function ToStringDict(): dict<int, string> {
    return self::$itos;
  }
  private static dict<string, int> $stoi = dict[
    'FEATURE_NONE' => 0,
    'FEATURE_PROTO3_OPTIONAL' => 1,
  ];
  public static function FromMixed(mixed $m): CodeGeneratorResponse_Feature_enum_t {
    if ($m is string) return idx(self::$stoi, $m, \is_numeric($m) ? ((int) $m) : 0);
    if ($m is int) return $m;
    return 0;
  }
  public static function FromInt(int $i): CodeGeneratorResponse_Feature_enum_t {
    return $i;
  }
}

class CodeGeneratorResponse_File implements \Protobuf\Message {
  private string $name;
  private bool $was_name_set;
  private string $insertion_point;
  private bool $was_insertion_point_set;
  private string $content;
  private bool $was_content_set;
  private ?\google\protobuf\GeneratedCodeInfo $generated_code_info;
  private bool $was_generated_code_info_set;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'name' => string,
    ?'insertion_point' => string,
    ?'content' => string,
    ?'generated_code_info' => ?\google\protobuf\GeneratedCodeInfo,
  ) $s = shape()) {
    if (Shapes::keyExists($s, 'name')) {
      $this->name = $s['name'];
      $this->was_name_set = true;
    } else {
      $this->name = '';
      $this->was_name_set = false;
    }
    if (Shapes::keyExists($s, 'insertion_point')) {
      $this->insertion_point = $s['insertion_point'];
      $this->was_insertion_point_set = true;
    } else {
      $this->insertion_point = '';
      $this->was_insertion_point_set = false;
    }
    if (Shapes::keyExists($s, 'content')) {
      $this->content = $s['content'];
      $this->was_content_set = true;
    } else {
      $this->content = '';
      $this->was_content_set = false;
    }
    if (Shapes::keyExists($s, 'generated_code_info')) {
      $this->generated_code_info = $s['generated_code_info'];
      $this->was_generated_code_info_set = true;
    } else {
      $this->generated_code_info = null;
      $this->was_generated_code_info_set = false;
    }
    $this->XXX_unrecognized = '';
  }

  public function getName(): string {
    return $this->name;
  }

  public function setName(string $v): void {
    $this->name = $v;
    $this->was_name_set = true;
  }

  public function hasName(): bool {
    return $this->was_name_set;
  }

  public function getInsertionPoint(): string {
    return $this->insertion_point;
  }

  public function setInsertionPoint(string $v): void {
    $this->insertion_point = $v;
    $this->was_insertion_point_set = true;
  }

  public function hasInsertionPoint(): bool {
    return $this->was_insertion_point_set;
  }

  public function getContent(): string {
    return $this->content;
  }

  public function setContent(string $v): void {
    $this->content = $v;
    $this->was_content_set = true;
  }

  public function hasContent(): bool {
    return $this->was_content_set;
  }

  public function getGeneratedCodeInfo(): ?\google\protobuf\GeneratedCodeInfo {
    return $this->generated_code_info;
  }

  public function setGeneratedCodeInfo(?\google\protobuf\GeneratedCodeInfo $v): void {
    $this->generated_code_info = $v;
    $this->was_generated_code_info_set = true;
  }

  public function hasGeneratedCodeInfo(): bool {
    return $this->was_generated_code_info_set;
  }

  public function MessageName(): string {
    return "google.protobuf.compiler.CodeGeneratorResponse.File";
  }

  public static function ParseFrom(string $input): ?CodeGeneratorResponse_File {
    $msg = new CodeGeneratorResponse_File();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->name = $d->readString();
          $this->was_name_set = true;
          break;
        case 2:
          $this->insertion_point = $d->readString();
          $this->was_insertion_point_set = true;
          break;
        case 15:
          $this->content = $d->readString();
          $this->was_content_set = true;
          break;
        case 16:
          if ($this->generated_code_info is null) {
            $this->generated_code_info = new \google\protobuf\GeneratedCodeInfo();
            $this->was_generated_code_info_set = true;
          }
          $this->generated_code_info->MergeFrom($d->readDecoder());
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized = $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->was_name_set) {
      $e->writeTag(1, 2);
      $e->writeString($this->name);
    }
    if ($this->was_insertion_point_set) {
      $e->writeTag(2, 2);
      $e->writeString($this->insertion_point);
    }
    if ($this->was_content_set) {
      $e->writeTag(15, 2);
      $e->writeString($this->content);
    }
    $msg = $this->generated_code_info;
    if ($msg != null) {
      if ($this->was_generated_code_info_set) {
        $nested = new \Protobuf\Internal\Encoder();
        $msg->WriteTo($nested);
        $e->writeEncoder($nested, 16);
      }
    }
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    if ($this->hasName()) {
      $e->writeString('name', 'name', $this->name, false);
    }
    if ($this->hasInsertionPoint()) {
      $e->writeString('insertion_point', 'insertionPoint', $this->insertion_point, false);
    }
    if ($this->hasContent()) {
      $e->writeString('content', 'content', $this->content, false);
    }
    if ($this->hasGeneratedCodeInfo()) {
      $e->writeMessage('generated_code_info', 'generatedCodeInfo', $this->generated_code_info, false);
    }
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'name':
          $this->name = \Protobuf\Internal\JsonDecoder::readString($v);
          $this->was_name_set = true;
          break;
        case 'insertion_point': case 'insertionPoint':
          $this->insertion_point = \Protobuf\Internal\JsonDecoder::readString($v);
          $this->was_insertion_point_set = true;
          break;
        case 'content':
          $this->content = \Protobuf\Internal\JsonDecoder::readString($v);
          $this->was_content_set = true;
          break;
        case 'generated_code_info': case 'generatedCodeInfo':
          if ($v is null) break;
          if ($this->generated_code_info is null) {
            $this->generated_code_info = new \google\protobuf\GeneratedCodeInfo();
            $this->was_generated_code_info_set = true;
          }
          $this->generated_code_info->MergeJsonFrom($v);
          break;
        default:
        break;
      }
    }
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is CodeGeneratorResponse_File)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->hasName()) {
      $this->setName($o->getName());
    }
    if ($o->hasInsertionPoint()) {
      $this->setInsertionPoint($o->getInsertionPoint());
    }
    if ($o->hasContent()) {
      $this->setContent($o->getContent());
    }
    $tmp = $o->generated_code_info;
    if ($tmp is nonnull) {
      $nv = new \google\protobuf\GeneratedCodeInfo();
      $nv->CopyFrom($tmp);
      $this->setGeneratedCodeInfo($nv);
    } else if ($o->hasGeneratedCodeInfo()) {
      $this->setGeneratedCodeInfo(null);
    }
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}

class CodeGeneratorResponse implements \Protobuf\Message {
  private string $error;
  private bool $was_error_set;
  private int $supported_features;
  private bool $was_supported_features_set;
  public vec<\google\protobuf\compiler\CodeGeneratorResponse_File> $file;
  private string $XXX_unrecognized;

  public function __construct(shape(
    ?'error' => string,
    ?'supported_features' => int,
    ?'file' => vec<\google\protobuf\compiler\CodeGeneratorResponse_File>,
  ) $s = shape()) {
    if (Shapes::keyExists($s, 'error')) {
      $this->error = $s['error'];
      $this->was_error_set = true;
    } else {
      $this->error = '';
      $this->was_error_set = false;
    }
    if (Shapes::keyExists($s, 'supported_features')) {
      $this->supported_features = $s['supported_features'];
      $this->was_supported_features_set = true;
    } else {
      $this->supported_features = 0;
      $this->was_supported_features_set = false;
    }
    $this->file = $s['file'] ?? vec[];
    $this->XXX_unrecognized = '';
  }

  public function getError(): string {
    return $this->error;
  }

  public function setError(string $v): void {
    $this->error = $v;
    $this->was_error_set = true;
  }

  public function hasError(): bool {
    return $this->was_error_set;
  }

  public function getSupportedFeatures(): int {
    return $this->supported_features;
  }

  public function setSupportedFeatures(int $v): void {
    $this->supported_features = $v;
    $this->was_supported_features_set = true;
  }

  public function hasSupportedFeatures(): bool {
    return $this->was_supported_features_set;
  }

  public function MessageName(): string {
    return "google.protobuf.compiler.CodeGeneratorResponse";
  }

  public static function ParseFrom(string $input): ?CodeGeneratorResponse {
    $msg = new CodeGeneratorResponse();
    $e = \Protobuf\Unmarshal($input, $msg);
    if (!$e->Ok()) {
      return null;
    }
    return $msg;
  }

  public function MergeFrom(\Protobuf\Internal\Decoder $d): void {
    while (!$d->isEOF()){
      list($fn, $wt) = $d->readTag();
      switch ($fn) {
        case 1:
          $this->error = $d->readString();
          $this->was_error_set = true;
          break;
        case 2:
          $this->supported_features = $d->readVarint();
          $this->was_supported_features_set = true;
          break;
        case 15:
          $obj = new \google\protobuf\compiler\CodeGeneratorResponse_File();
          $obj->MergeFrom($d->readDecoder());
          $this->file []= $obj;
          break;
        default:
          $d->skip($fn, $wt);
      }
    }
    $this->XXX_unrecognized = $d->skippedRaw();
  }

  public function WriteTo(\Protobuf\Internal\Encoder $e): void {
    if ($this->was_error_set) {
      $e->writeTag(1, 2);
      $e->writeString($this->error);
    }
    if ($this->was_supported_features_set) {
      $e->writeTag(2, 0);
      $e->writeVarint($this->supported_features);
    }
    foreach ($this->file as $msg) {
      $nested = new \Protobuf\Internal\Encoder();
      $msg->WriteTo($nested);
      $e->writeEncoder($nested, 15);
    }
    $e->writeRaw($this->XXX_unrecognized);
  }

  public function WriteJsonTo(\Protobuf\Internal\JsonEncoder $e): void {
    if ($this->hasError()) {
      $e->writeString('error', 'error', $this->error, false);
    }
    if ($this->hasSupportedFeatures()) {
      $e->writeInt64Unsigned('supported_features', 'supportedFeatures', $this->supported_features, false);
    }
    $e->writeMessageList('file', 'file', $this->file);
  }

  public function MergeJsonFrom(mixed $m): void {
    if ($m === null) return;
    $d = \Protobuf\Internal\JsonDecoder::readObject($m);
    foreach ($d as $k => $v) {
      switch ($k) {
        case 'error':
          $this->error = \Protobuf\Internal\JsonDecoder::readString($v);
          $this->was_error_set = true;
          break;
        case 'supported_features': case 'supportedFeatures':
          $this->supported_features = \Protobuf\Internal\JsonDecoder::readInt64Unsigned($v);
          $this->was_supported_features_set = true;
          break;
        case 'file':
          foreach(\Protobuf\Internal\JsonDecoder::readList($v) as $vv) {
            $obj = new \google\protobuf\compiler\CodeGeneratorResponse_File();
            $obj->MergeJsonFrom($vv);
            $this->file []= $obj;
          }
          break;
        default:
        break;
      }
    }
  }

  public function CopyFrom(\Protobuf\Message $o): \Errors\Error {
    if (!($o is CodeGeneratorResponse)) {
      return \Errors\Errorf('CopyFrom failed: incorrect type received: %s', $o->MessageName());
    }
    if ($o->hasError()) {
      $this->setError($o->getError());
    }
    if ($o->hasSupportedFeatures()) {
      $this->setSupportedFeatures($o->getSupportedFeatures());
    }
    foreach ($o->file as $v) {
      $nv = new \google\protobuf\compiler\CodeGeneratorResponse_File();
      $nv->CopyFrom($v);
      $this->file []= $nv;
    }
    $this->XXX_unrecognized = $o->XXX_unrecognized;
    return \Errors\Ok();
  }
}


class XXX_FileDescriptor_google_protobuf_compiler_plugin__proto implements \Protobuf\Internal\FileDescriptor {
  const string NAME = 'google/protobuf/compiler/plugin.proto';
  public function Name(): string {
    return self::NAME;
  }

  public function FileDescriptorProtoBytes(): string {
    // 1967 bytes of gzipped FileDescriptorProto as a string
    return (string)\gzuncompress("\x78\xda\x74\x93\xc1\x6e\xd3\x4c\x10\x80\x7f\xff\x49\xa9\x3c\xad\x1a\x77\x29\x60\x95\x1e\x42\x4\x22\x1c\x70\xa5\xc2\x81\x6b\x5b\x12\xa8\x54\x25\xd1\x2a\x80\xc4\xc5\x72\xed\xb1\x59\xe4\xec\x2c\xeb\x35\x82\xf7\xe0\x45\x78\x34\xde\x0\x79\xbd\x4e\x51\x20\x37\xcf\x37\xb3\xab\x99\x6f\x3d\xf0\xa4\x20\x2a\x4a\x3c\x55\x9a\xc\xdd\xd4\xf9\x69\x4a\x2b\x25\x4a\xd4\xa7\xaa\xac\xb\x21\x23\x9b\x60\x61\x5b\x16\x75\x65\x51\x57\x76\x3c\xdc\xbc\x20\xc3\x2a\xd5\x42\x19\xd2\x6d\xf5\x28\x85\xdd\xf7\xa8\x2b\x41\x92\x1d\xc1\xce\x2a\xf9\x4c\x3a\xf4\x86\xde\x78\x87\xb7\x81\xa5\x42\x92\xe\xff\x77\xb4\x9\x1a\xaa\x12\x93\x7e\xa\x7b\x2d\xb5\x1\xbb\xf\x77\xaa\x3a\xcf\xc5\xb7\xb0\x3f\xf4\xc6\x3e\x77\xd1\xe8\x97\x7\x47\x97\x94\xe1\x1b\x94\xa8\x13\x43\x9a\xe3\x97\x1a\x2b\xc3\xc6\x10\xe4\xa2\xc4\xd8\x50\x5c\xb4\x39\xc\xbd\x61\x6f\xec\xf3\x83\x86\x2f\xc9\x9d\x40\x76\x2\xbe\x4a\x74\xb2\x42\x83\x6d\x2b\x3e\xbf\x5\xec\x12\xc0\x8e\x13\x37\xa7\xc2\xc1\xb0\x37\xde\x3b\x7b\x1c\x6d\x6a\x99\x8a\x12\x5f\xaf\x5\x2c\x1a\xcc\x7d\x9b\x6d\x32\xec\x1a\x82\x4e\x5c\xfc\xb5\x75\x62\xc7\xdb\x3b\x7b\x14\x6d\x33\x1c\x39\x79\x7c\xd0\x11\x7\x46\x3f\x7a\x70\x6f\x63\xe6\x4a\x91\xac\xb0\x71\x87\x5a\x3b\xcf\x3e\x6f\x3\xf6\x1c\x58\x55\x2b\x45\xda\x60\x16\xe7\x98\x98\x5a\x63\x65\x27\xed\xf3\xc3\x75\x66\xea\x12\xec\x2d\xf4\xff\x98\xf5\xe5\xf6\x6\xff\xd9\x83\x55\xc1\xed\xd\xc7\x3f\x3d\xe8\xdb\xf9\x19\xf4\x65\xb2\x42\xd7\x96\xfd\x66\x4f\x61\x20\x64\x85\xda\x8\x92\xb1\x22\x21\x8d\x93\x7f\xb0\xc6\x8b\x86\xb2\x10\x76\x53\x92\x6\xa5\x9\x7\xb6\xa0\xb\x19\x87\xbb\xdd\xdb\x66\x71\x4a\x19\xc6\x42\xe6\x14\x6\xd6\xec\xe8\xaf\xc6\xbb\x17\xcf\x9a\xc6\xaf\x64\x4e\xfc\xb0\xd8\x44\xa3\x57\xb0\xeb\x4c\xb0\x0\xf6\xa7\x93\xf3\xe5\x3b\x3e\x89\x67\xf3\xd9\x24\xf8\x8f\x3d\x84\x7\x1d\x59\xf0\xf9\x72\xfe\x22\x9e\x2f\x96\x57\xf3\xd9\xf9\x75\xe0\x5d\x7c\x80\x93\x94\x56\x5b\x75\x5d\xec\x2f\xec\x66\xd9\x9f\xa3\xfa\xf8\xcc\xd5\x15\x54\x26\xb2\x88\x48\x17\xb7\xab\x64\xbe\x2b\xac\xdc\x22\xaa\x9b\xdf\x1\x0\x0\xff\xff\x42\x72\x31\x23");
  }
}
